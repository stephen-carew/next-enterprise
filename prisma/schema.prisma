generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Drink {
  id          String       @id @default(cuid())
  name        String
  description String
  price       Float
  category    String
  imageUrl    String?
  isAvailable Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  OrderDrink  OrderDrink[]
}

model Table {
  id              String           @id @default(cuid())
  number          Int              @unique
  status          String          @default("ACTIVE")
  orders          Order[]
  paymentRequests PaymentRequest[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Order {
  id            String        @id @default(cuid())
  tableId       String
  status        OrderStatus   @default(PENDING)
  total         Float
  paymentMethod PaymentMethod
  paymentStatus String        @default("PENDING")
  paymentId     String?       // Optional payment ID
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  table         Table         @relation(fields: [tableId], references: [id])
  OrderDrink    OrderDrink[]
}

model OrderDrink {
  id        String   @id @default(cuid())
  orderId   String
  drinkId   String
  quantity  Int
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Drink     Drink    @relation(fields: [drinkId], references: [id])
  Order     Order    @relation(fields: [orderId], references: [id])

  @@unique([orderId, drinkId])
}

model PaymentRequest {
    id        String   @id @default(cuid())
    tableId   String
    amount    Float
    status    String   @default("PENDING")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    table     Table    @relation(fields: [tableId], references: [id])

    @@index([tableId])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PREPARING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  APPLE_PAY
  GOOGLE_PAY
}

model InventoryItem {
    id          String   @id @default(cuid())
    name        String
    description String?
    quantity    Float
    unit        String   // e.g., "ml", "oz", "bottles", "cans"
    minQuantity Float    // Minimum quantity before alert
    category    String   // e.g., "Spirits", "Beer", "Wine", "Mixers", "Garnishes"
    supplier    String?
    price       Float    // Cost per unit
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    alerts      InventoryAlert[]
}

model InventoryAlert {
    id              String         @id @default(cuid())
    inventoryItem   InventoryItem  @relation(fields: [inventoryItemId], references: [id])
    inventoryItemId String
    type            AlertType      // LOW_STOCK, OUT_OF_STOCK, EXPIRING
    message         String
    isResolved      Boolean        @default(false)
    createdAt       DateTime       @default(now())
    resolvedAt      DateTime?
}

enum AlertType {
    LOW_STOCK
    OUT_OF_STOCK
    EXPIRING
}
